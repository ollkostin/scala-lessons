package lessons.unit5._2collections

/**
 * Некоторые генетические алгоритмы для генерации новых хромосом из старых используют приём под названием кроссинговер.
 *
 * Будем представлять хромосому с генами [xxxxx] в виде списка List('x', 'x', 'x', 'x', 'x') . Тогда суть приёма заключается в следующем:
 *
 * Берутся две хромосомы одинаковой длины, например [xxxxx] и [yyyyy]. Списки для них будут выглядеть так:
 * List('x', 'x', 'x', 'x', 'x')
 * List('y', 'y', 'y', 'y', 'y')
 *
 * Выбираются так называемые `точки кроссинговера`. В нашем случае это некоторые индексы в диапазоне [1, длина списка генов хромосомы]. Пусть выбраны индексы 1 и 3.
 * Для  каждого индекса, по возрастанию, хромосомы обмениваются своими частями, стоящими после этого индекса. В  нашем случае после кроссинговера по индексу 1:
 * List('x', 'y', 'y', 'y', 'y')
 * List('y', 'x', 'x', 'x', 'x')
 * А после дальнейшего кроссинговера по индексу 3:
 * List('x', 'y', 'y', 'x', 'x')
 * List('y', 'x', 'x', 'y', 'y')
 * Ничего считывать из ﻿консоли не надо. ﻿Вам даны:
 * val points: List[Int] = Lesson.points // точки кроссинговера
 * val chr1: List[Char] = Lesson.chr1 // первая хромосома
 * val chr2: List[Char] = Lesson.chr2 // вторая хромосома
 * ﻿Выведите результат хромосомы после кроссинговера, сначала первую, затем вторую. Без пробелов и знаков препинания.
 */
object CrossingOver {

  def main(args: Array[String]): Unit = {
    //    val points: List[Int] = List(1, 3) // точки кроссинговера
    //    val chr1: List[Char] = List('x', 'x', 'x', 'x', 'x') // первая хромосома
    //    val chr2: List[Char] = List('y', 'y', 'y', 'y', 'y') // вторая хромосома
    val points: List[Int] = List(2, 4, 5) // точки кроссинговера
    val chr1: List[Char] = List('a', 'a', 'a', 'a', 'a', 'a') // первая хромосома
    val chr2: List[Char] = List('d', 'd', 'd', 'd', 'd', 'd') // вторая хромосома

    var first = chr1
    var sec = chr2
    points.foreach(p => {
      val tmp = first.splitAt(p)._1 ++ sec.splitAt(p)._2
      sec = sec.splitAt(p)._1 ++ first.splitAt(p)._2
      first = tmp
    })

    println(first.mkString)
    println(sec.mkString)
  }


}
